#pragma once

// generated by /home/wzx/桌面/tools/sqlpp11/scripts/ddl2cpp ./demo.sql ./demo demo

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace demo
{
  namespace Accounts_
  {
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UserName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userName;
            T& operator()() { return userName; }
            const T& operator()() const { return userName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PassWord
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "passWord";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T passWord;
            T& operator()() { return passWord; }
            const T& operator()() const { return passWord; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Accounts_

  struct Accounts: sqlpp::table_t<Accounts,
               Accounts_::UserId,
               Accounts_::UserName,
               Accounts_::PassWord>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accounts;
        T& operator()() { return accounts; }
        const T& operator()() const { return accounts; }
      };
    };
  };
  namespace Chest_
  {
    struct PlayerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerId;
            T& operator()() { return playerId; }
            const T& operator()() const { return playerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Chest_

  struct Chest: sqlpp::table_t<Chest,
               Chest_::PlayerId,
               Chest_::ItemId,
               Chest_::Quantity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "chest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T chest;
        T& operator()() { return chest; }
        const T& operator()() const { return chest; }
      };
    };
  };
  namespace Players_
  {
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PlayerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerId;
            T& operator()() { return playerId; }
            const T& operator()() const { return playerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct NickName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nickName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nickName;
            T& operator()() { return nickName; }
            const T& operator()() const { return nickName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Players_

  struct Players: sqlpp::table_t<Players,
               Players_::UserId,
               Players_::PlayerId,
               Players_::NickName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "players";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T players;
        T& operator()() { return players; }
        const T& operator()() const { return players; }
      };
    };
  };
} // namespace demo
