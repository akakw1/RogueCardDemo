#pragma once

// generated by /home/wzx/桌面/tools/sqlpp11/scripts/ddl2cpp ./ddl/Enemy.sql ./include/Enemy CardGame

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace CardGame
{
  namespace Enemy_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct MaxHp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "MaxHp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxHp;
            T& operator()() { return MaxHp; }
            const T& operator()() const { return MaxHp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version;
            T& operator()() { return version; }
            const T& operator()() const { return version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Enemy_

  struct Enemy: sqlpp::table_t<Enemy,
               Enemy_::Id,
               Enemy_::Name,
               Enemy_::MaxHp,
               Enemy_::Version>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Enemy";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Enemy;
        T& operator()() { return Enemy; }
        const T& operator()() const { return Enemy; }
      };
    };
  };
} // namespace CardGame
